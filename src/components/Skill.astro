---
import type { SkillType, TypeConfig } from "../types/skill.types";

interface Props {
  type: SkillType;
}

const typesConfig: Record<SkillType, TypeConfig> = {
  frontend: {
    title: "Frontend",
    class: "border-blue-500 bg-blue-500/25 text-blue-200",
  },
  backend: {
    title: "Backend",
    class: "border-purple-500 bg-purple-500/25 text-purple-200",
  },
  soft: {
    title: "Soft",
    class: "border-green-500 bg-green-500/25 text-green-200",
  },
  hard: {
    title: "Hard",
    class: "border-red-500 bg-red-500/25 text-red-200",
  },
  fullstack: {
    title: "Fullstack",
    class: "border-amber-500 bg-amber-500/25 text-amber-200",
  },
  programmingl: {
    title: "Programming Language",
    class: "border-pink-500 bg-pink-500/25 text-pink-200",
  },
  database: {
    title: "Database",
    class: "border-lime-500 bg-lime-500/25 text-lime-200",
  },
  tools: {
    title: "Tools",
    class: "border-indigo-500 bg-indigo-500/25 text-indigo-200",
  },
};

const { type } = Astro.props;
---

<span
  data-tooltip={typesConfig[type].title}
  class={`relative px-2 py-1 border rounded-full text-sm font-semibold [&:hover>div]:block ${typesConfig[type].class}`}
>
  <slot />
  <div
    class="hidden bg-white text-black px-3 py-1 rounded-lg absolute z-10 text-nowrap -top-[135%] left-1/2 -translate-x-1/2"
  >
    {typesConfig[type].title}
  </div>
</span>

<style>
  div::before {
    content: "";
    transform: translateX(-50%) rotate(45deg);
    @apply absolute z-50 w-2 h-2 bg-white -bottom-[15%] left-1/2;
  }
</style>
